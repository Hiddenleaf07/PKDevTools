# """
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the "Software"), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """
name: 11. PKDevTools Test Coverage

on:
  workflow_dispatch:
    inputs:
      branch-name:
        description: 'Branch name'
        required: false
        default: 'main'
  workflow_call:
    inputs:
      branch-name:
        required: true
        type: string
        default: 'new-features'
jobs:
  # Job for testing coverage
  Build:
    name: Build and test/update coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            TARGET: Linux
            CMD_BUILD: |
              rm -rf .pytest_cache
              rm -rf PKDevTools/__pycache__
              rm -rf test/__pycache__
              rm -rf test/.coverage
              rm -rf .coverage
              find . -name "*.pyc" -exec rm -rf {} \;
              sudo find /tmp/ -name "*.py" -exec rm -rf {} \;
              find . -name ".coverage.*" -exec rm -rf {} \;
            DEP_BUILD: |
              cd /home/runner/work/PKTools/PKDevTools/
              python -m pip install --upgrade pip
              pip3 install -r requirements.txt
              pip3 install -r requirements-dev.txt
              pip3 install .
              # note: the following also installs "coverage"
              python -m pip install coveralls
            TEST_BUILD: |
              coverage erase
              coverage run --source=${package_name} --branch -m pytest -vv --durations-min=0.005
              coverage combine
              # quick local report output to console:
              coverage report -i
              coverage html -i
              coverage xml -i
              curl -s https://codecov.io/bash | bash
              coveralls --service=github
              # coverage run --source=${package_name} --branch -m pytest --cov=PKDevTools test/
              # coveralls --service=github
          - os: windows-latest
            TARGET: Windows
            CMD_BUILD: |
              echo Building
            DEP_BUILD: |
              python -m pip install --upgrade pip
              pip3 install -r requirements.txt
              pip3 install -r requirements-dev.txt
              pip3 install .
            TEST_BUILD: |
              pytest -vv --durations-min=0.005
          - os: macos-latest
            TARGET: MacOS
            CMD_BUILD: |
              rm -rf .pytest_cache
              rm -rf PKDevTools/__pycache__
              rm -rf test/__pycache__
              rm -rf test/.coverage
              rm -rf .coverage
              find . -name "*.pyc" -exec rm -rf {} \;
              find . -name ".coverage.*" -exec rm -rf {} \;
            DEP_BUILD: |
              python -m pip install --upgrade pip
              pip3 install -r requirements.txt
              pip3 install -r requirements-dev.txt
              pip3 install .
            TEST_BUILD: |
              pytest -vv --durations-min=0.005

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ inputs.branch-name }}

      - name: Declare env variables
        id: vars
        env:
          CHAT_ID_DEV : ${{secrets.CHAT_ID_DEV}}
          TOKEN_DEV : ${{secrets.TOKEN_DEV}}
          CHAT_IDADMIN_DEV : ${{secrets.CHAT_IDADMIN_DEV}}
        shell: bash
        run: |
          python -c "import os; file = open('PKDevTools/.env.dev', 'w'); file.write('CHAT_ID='+os.environ['CHAT_ID_DEV']+'\n'); file.write('TOKEN='+os.environ['TOKEN_DEV']+'\n'); file.write('chat_idADMIN='+os.environ['CHAT_IDADMIN_DEV']+'\n'); file.close()"
          GITHUB_REF=${GITHUB_REF#refs/tags/}
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Load Cache for Linux Dependencies
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: |
            /usr/include/ta-lib
            /usr/bin/ta-lib-config
          key: ${{ runner.os }}-talib
          restore-keys: |
            ${{ runner.os }}-talib

      - name: Install dependencies for ${{ matrix.TARGET }}
        run: ${{ matrix.DEP_BUILD }}

      - name: Build for ${{ matrix.TARGET }}
        run: ${{ matrix.CMD_BUILD }}

      - name: Test Built Binary for ${{ matrix.TARGET }}
        shell: bash
        timeout-minutes: 30
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: ${{ matrix.TEST_BUILD }}
        continue-on-error: false


