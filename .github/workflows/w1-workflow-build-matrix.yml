# """
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the "Software"), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """
name: 1. pktools Build - New Release

on:
  # push:
  #   #branches: [ pre-main ]
  #   tags:
  #     - '*'
  workflow_dispatch:
    inputs:
      branch-name:
        description: 'Branch name'
        required: false
        default: 'main'
jobs:

  check_should_run:
    runs-on: windows-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a week
        if: ${{ github.event_name == 'schedule' }} || ${{ github.event_name == 'workflow_dispatch' }}
        run: test -z $(git rev-list  --after="7 days"  ${{ github.sha }}) && echo "::set-output name=should_run::false"

  # Job for builing packages
  Build:
    name: Build Packages
    needs: check_should_run
    #needs: Create-Release
    runs-on: ${{ matrix.os }}
    outputs:
        version: ${{ steps.vars.outputs.THIS_VERSION }}
        tag: refs/tags/${{ steps.vars.outputs.THIS_VERSION }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            TARGET: Windows
            CMD_BUILD: |
              pip3 install .
            DEP_BUILD: |
              python -m pip install --upgrade pip
              pip3 install -r requirements.txt
              pip3 install -r requirements-dev.txt
          
          - os: ubuntu-20.04
            TARGET: Linux
            CMD_BUILD: |
              pip3 install .
            DEP_BUILD: |
              python -m pip install --upgrade pip
              pip3 install -r requirements.txt
              pip3 install -r requirements-dev.txt

          - os: macos-latest
            TARGET: MacOS
            CMD_BUILD: |
              pip3 install .
            DEP_BUILD: |
              python -m pip install --upgrade pip
              pip3 install -r requirements.txt
              pip3 install -r requirements-dev.txt
          
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ inputs.branch-name }}

      - name: Declare env variables
        id: vars
        shell: bash
        run: |
          GITHUB_REF=${GITHUB_REF#refs/tags/}
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          CURRENT_VERSION=`grep -o "'.*'" pktools/classes/__init__.py | sed "s/'//g"`
          VERSION_ARR=(${CURRENT_VERSION//./ })
          MAJOR_MINOR=${VERSION_ARR[0]}.${VERSION_ARR[1]}
          TODAY=`date +%Y%m%d`
          THIS_VERSION=${MAJOR_MINOR}.${TODAY}.${{github.run_number}}
          rm -rf pktools/classes/__init__.py
          echo VERSION=\'`echo ${THIS_VERSION}`\' >> pktools/classes/__init__.py
          echo "##[set-output name=THIS_VERSION;]$(echo ${THIS_VERSION})"
          echo "##[set-output name=CURRENT_VERSION;]$(echo ${CURRENT_VERSION})"

      - name: Create Tag
        if: startsWith(runner.os, 'Linux')
        run: |
            git config user.name github-actions
            git config user.email github-actions@github.com
            pip3 install mistletoe
            echo ${{ steps.vars.outputs.CURRENT_VERSION }}
            echo ${{ steps.vars.outputs.THIS_VERSION }}
            python .github/workflows/updateVersion.py -p pktools/release.md -f /${{ steps.vars.outputs.CURRENT_VERSION }}/ -r /${{ steps.vars.outputs.THIS_VERSION }}/ -t link
            python .github/workflows/updateVersion.py -p pktools/release.md -f [v${{ steps.vars.outputs.CURRENT_VERSION }}] -r [v${{ steps.vars.outputs.THIS_VERSION }}] -t text
            python .github/workflows/updateVersion.py -p README.md -f /${{ steps.vars.outputs.CURRENT_VERSION }}/ -r /${{ steps.vars.outputs.THIS_VERSION }}/ -t link
            git add pktools/classes/__init__.py --force
            git add pktools/release.md --force
            git add README.md --force
            git commit -m "GitHub Action Workflow - Updating version to latest"
            git tag ${{ steps.vars.outputs.THIS_VERSION }} -a -f -m 'Release v${{ steps.vars.outputs.THIS_VERSION }}'
            git push -v --tags

      - name: Get the GitHub Tag version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Update ReadME release.md and library version
        if: startsWith(runner.os, 'Linux')
        id: read_release
        shell: bash
        run: |
          pip install mistletoe
          python pktools/classes/updater.py -p pktools/release.md -f /${{ steps.vars.outputs.CURRENT_VERSION }}/ -r /${{ steps.vars.outputs.THIS_VERSION }}/ -t link
          r=$(cat pktools/release.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "::set-output name=RELEASE_BODY::$r"

      - name: Install dependencies for ${{ matrix.TARGET }}
        run: ${{ matrix.DEP_BUILD }}

      - name: Build for ${{ matrix.TARGET }}
        run: ${{ matrix.CMD_BUILD }}

  Call-python-publish-workflow:
      uses: pkjmesra/pktools/.github/workflows/w2-workflow-python-publish.yml@main
      needs: [Build]
      with:
        branch-name: ${{ needs.Build.outputs.tag }}
        version: ${{ needs.Build.outputs.version }}
      secrets: inherit
